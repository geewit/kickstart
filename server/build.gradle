project(':server') {

    dependencies {
        compile(project(":domain"))
        if(profile == "development") {
            compile(project(":cache:cache-ehcache"))
        } else {
            compile(project(":cache:cache-redis"))
        }
        compile("com.alibaba:druid-spring-boot-starter:$druid_version")
        runtimeOnly("javax.xml.bind:jaxb-api:$jaxb_api_version")
        runtimeOnly("com.sun.xml.bind:jaxb-core:$jaxb_impl_version")
        runtimeOnly("com.sun.xml.bind:jaxb-impl:$jaxb_impl_version")
        runtimeOnly("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$jackson_version")
        compile("org.springframework.boot:spring-boot-starter:$spring_boot_version")
        compile("org.springframework.boot:spring-boot-starter-cache:$spring_boot_version")
        compile("org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version")
        compile("org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version")
        compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version")
        compile("org.springframework.boot:spring-boot-starter-undertow:$spring_boot_version")
        compile("org.hibernate:hibernate-ehcache:$hibernate_version")
        compile("io.springfox:springfox-swagger-ui:$springfox_version")
        runtime("mysql:mysql-connector-java:$mysql_version")
        runtime("com.sun.activation:javax.activation:$javax_activation_version")
        runtime("javax.annotation:javax.annotation-api:$javax_annotation_api_version")
        runtime("javax.servlet:javax.servlet-api:$javax_servlet_api_version")
        runtime("javax.transaction:javax.transaction-api:$javax_transaction_api_version")
        runtime("javax.websocket:javax.websocket-api:$javax_websocket_api_version")
    }

    bootJar {
        destinationDir = rootProject.buildDir
        archiveName = "kickstart.jar"
        if (profile == 'production') {
            enabled = true
            launchScript {
                properties 'logFilename': 'kickstart.log'
            }
        } else {
            from("${rootDir}/ui/dist") {
                into 'META-INF/resources'
            }
        }
    }
    if(profile != 'production') {
        def npmProfile
        if(profile == 'development') {
            npmProfile = 'build_sit'
        } else {
            npmProfile = 'build_prod'
        }

        println "task jar dependsOn :sui:${npmProfile}"
        bootJar.dependsOn ":ui:${npmProfile}"
        bootJar.mustRunAfter ":ui:${npmProfile}"
    }
}
